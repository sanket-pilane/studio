
{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user in the system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user.",
          "format": "uuid"
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        }
      },
      "required": [
        "id",
        "email",
        "name"
      ]
    },
    "Station": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Station",
      "type": "object",
      "description": "Represents a charging station.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the charging station."
        },
        "name": {
          "type": "string",
          "description": "Name of the charging station."
        },
        "address": {
          "type": "string",
          "description": "Address of the charging station."
        },
        "coordinates": {
            "type": "object",
            "properties": {
                "lat": {"type": "number"},
                "lng": {"type": "number"}
            },
            "required": ["lat", "lng"]
        },
        "connectors": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "type": {"type": "string"},
                    "speed": {"type": "number"}
                },
                "required": ["type", "speed"]
            }
        },
        "price": {
          "type": "number",
          "description": "Price per charging session."
        },
        "totalChargers": {
          "type": "number",
          "description": "Total number of chargers at the station."
        },
        "availableChargers": {
          "type": "number",
          "description": "Number of available chargers at the station."
        },
        "rating": {
          "type": "number"
        }
      },
      "required": [
        "id",
        "name",
        "address",
        "coordinates",
        "connectors",
        "price",
        "totalChargers",
        "availableChargers",
        "rating"
      ]
    },
    "Booking": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Booking",
      "type": "object",
      "description": "Represents a booking for a charging station.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the booking.",
          "format": "uuid"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Booking)"
        },
        "stationId": {
          "type": "string",
          "description": "Reference to Station. (Relationship: Station 1:N Booking)"
        },
        "startTime": {
          "type": "string",
          "description": "Start time of the booking.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "End time of the booking.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "stationId",
        "startTime",
        "endTime"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  Path-based ownership enforced via the {userId} parameter.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/stations/{stationId}",
        "definition": {
          "entityName": "Station",
          "schema": {
            "$ref": "#/backend/entities/Station"
          },
          "description": "Stores charging station information. Open access for reading station details.",
          "params": [
            {
              "name": "stationId",
              "description": "The unique identifier for the charging station."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/bookings/{bookingId}",
        "definition": {
          "entityName": "Booking",
          "schema": {
            "$ref": "#/backend/entities/Booking"
          },
          "description": "Stores booking information for a user. Includes denormalized 'stationId' and potentially relevant station details for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "bookingId",
              "description": "The unique identifier for the booking."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the ChargeSpot Navigator application, emphasizing security, scalability, and ease of debugging through authorization independence.  We will use a hybrid approach of Path-Based Ownership (for user-specific data) and Membership Maps (for collaborative/shared data). Charging stations are stored in a flat collection, allowing for easy querying and map display.  Bookings are nested under users to represent the one-to-many relationship, with denormalized station data for authorization independence. Operator managed stations are also separated into dedicated collections to simplify rules and follow Structural Segregation.\n\n**Authorization Independence:**\nTo achieve authorization independence and avoid `get()` calls in security rules:\n*   `Bookings`: The `stationId` and relevant details like operator information are copied into the booking documents.\n*   `OperatorChargingStations`:  Operators' UIDs are stored as a key within a members map.\n\n**QAPs Support:**\n*   Secure List Operations: Structural Segregation enables simple list operations.\n*   The segregation of user-owned data (bookings) and globally accessible data (charging stations) ensures that list operations can be secured based on the specific collection's security posture."
  }
}
