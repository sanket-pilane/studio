/**
 * @fileoverview Firestore Security Rules for ChargeSpot Navigator.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, vehicles, and bookings.
 * Charging station data is publicly readable but only modifiable by the station's operator.
 * Operator data is protected, with potential for future role-based access control.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/vehicles/{vehicleId}: Stores vehicles owned by a specific user.
 * - /users/{userId}/bookings/{bookingId}: Stores bookings made by a specific user.
 * - /chargingStations/{stationId}: Stores charging station information, including the operatorId.
 * - /operators/{operatorId}: Stores operator information.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Charging station data is publicly readable to facilitate discovery.
 * - Write access to charging stations is restricted to the owning operator.
 * - Operator data access is currently unrestricted but should be secured in the future.
 *
 * Denormalization for Authorization:
 * - The `ChargingStation` entity denormalizes `operatorId` to enable direct authorization checks.
 * - The `Booking` entity denormalizes `userId` and `stationId` to simplify booking-related rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, ensuring only the user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their profile if request.auth.uid == 'abc'.
     * @allow (get, update, delete) - User 'abc' can get, update, or delete their profile if request.auth.uid == 'abc'.
     * @deny (create, update, delete) - User 'def' cannot create, update, or delete user 'abc's profile.
     * @deny (list) - No one can list all users.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects user vehicle data, ensuring only the user can manage their own vehicles.
     * @path /users/{userId}/vehicles/{vehicleId}
     * @allow (create) - User 'abc' can create a vehicle under their profile.
     * @allow (get, update, delete) - User 'abc' can get, update, or delete a vehicle under their profile.
     * @deny (create, update, delete) - User 'def' cannot create, update, or delete vehicle 'xyz' under user 'abc''s profile.
     * @allow (list) - User 'abc' can list vehicles under their profile.
     * @principle Enforces document ownership for writes and relational integrity.
     */
    match /users/{userId}/vehicles/{vehicleId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects user booking data, ensuring only the user can manage their own bookings.
     * @path /users/{userId}/bookings/{bookingId}
     * @allow (create) - User 'abc' can create a booking under their profile.
     * @allow (get, update, delete) - User 'abc' can get, update, or delete a booking under their profile.
     * @deny (create, update, delete) - User 'def' cannot create, update, or delete booking 'xyz' under user 'abc''s profile.
     * @allow (list) - User 'abc' can list bookings under their profile.
     * @principle Enforces document ownership for writes and relational integrity.
     */
    match /users/{userId}/bookings/{bookingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to charging station data, but restricts write access to the station's operator.
     * @path /chargingStations/{stationId}
     * @allow (get, list) - Any user can read charging station data.
     * @allow (create) - Operator 'op1' can create a station with operatorId 'op1' if request.auth.uid == 'op1'.
     * @allow (update, delete) - Operator 'op1' can update or delete a station with operatorId 'op1' if request.auth.uid == 'op1'.
     * @deny (create, update, delete) - User 'abc' cannot create, update, or delete any charging station.
     * @principle Allows public read access with owner-only writes, and enforces relational integrity.
     */
    match /chargingStations/{stationId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.operatorId == request.auth.uid;
      allow update: if isExistingOperator(request.resource.data.operatorId);
      allow delete: if isExistingOperator(resource.data.operatorId);
    }

    /**
     * @description Protects operator data.  Access control should be refined in the future for specific operator roles.
     * @path /operators/{operatorId}
     * @allow (get, list, create, update, delete) - No restrictions.
     * @principle Placeholder for future role-based access control.
     */
    match /operators/{operatorId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isOperator(operatorId) {
      return isSignedIn() && request.auth.uid == operatorId;
    }

    function isExistingOperator(operatorId) {
      return isOperator(operatorId) && resource != null;
    }
  }
}