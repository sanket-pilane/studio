/**
 * @fileoverview Firestore Security Rules for ChargeSpot Navigator.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, combining path-based ownership for user-specific data and public read access for general content.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the owning user.
 * - /charging_stations/{stationId}: Stores general charging station information. Publicly readable.
 * - /users/{userId}/bookings/{bookingId}: Stores booking information for a user. Access is restricted to the owning user.
 * - /operator_charging_stations/{stationId}: Charging stations owned by operators, managed via membership maps.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Charging station details are publicly readable.
 * - Listing of bookings is only allowed by the owner of the bookings.
 *
 * Denormalization for Authorization:
 * - Bookings: The `stationId` is denormalized into booking documents to avoid extra `get()` calls for authorization.
 * - OperatorChargingStations: Operator UIDs are denormalized as keys in a `members` map to avoid costly collection queries.
 *
 * Structural Segregation:
 * - User-specific data (bookings) is separated from globally accessible data (charging stations) to simplify list operations and enhance security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, update, delete) User with matching ID can read, update, or delete their profile.
     * @deny (create) User cannot create a profile with an ID that does not match their own.
     * @deny (get, update, delete) User cannot read, update, or delete another user's profile.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to charging station documents.
     * @path /charging_stations/{stationId}
     * @allow (get, list) Any user can read charging station details.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete charging stations.
     * @principle Allows public read access for station information but restricts write access.
     */
    match /charging_stations/{stationId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    /**
     * @description Controls access to booking documents nested under user profiles.
     * @path /users/{userId}/bookings/{bookingId}
     * @allow (create) User with matching ID can create a booking under their profile.
     * @allow (get, list, update, delete) User with matching ID can read, list, update, or delete their own bookings.
     * @deny (create) User cannot create a booking under another user's profile.
     * @deny (get, list, update, delete) User cannot read, list, update, or delete bookings under another user's profile.
     * @principle Enforces strict user-ownership for booking data.
     */
    match /users/{userId}/bookings/{bookingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to charging stations managed by operators.
     * @path /operator_charging_stations/{stationId}
     * @allow (create) Operators with membership to the station can create.
     * @allow (get, list) Any user can read operator charging station details.
     * @allow (update, delete) Only operators with membership to the station can update or delete.
     * @principle Allows membership-based write access for station management, and public read access.
     */
    match /operator_charging_stations/{stationId} {
        function isSignedIn() {
          return request.auth != null;
        }
        function isOperator(stationId) {
            return resource.data.members[request.auth.uid] != null;
        }
        function canManageStation(stationId) {
            return resource.data.members[request.auth.uid] == 'owner';
        }

        allow get, list: if true;
        allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if isSignedIn() && isOperator(stationId); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn() && isOperator(stationId); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}