/**
 * @fileoverview Firestore Security Rules for ChargeSpot Navigator.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (profiles, vehicles, bookings).
 * Charging station and operator data is managed independently, with authorization checks based on the 'operatorId' field within charging station documents.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can access their own profile.
 * - /users/{userId}/vehicles/{vehicleId}: Stores vehicles owned by the user. Only the user can access their own vehicles.
 * - /users/{userId}/bookings/{bookingId}: Stores bookings made by the user. Only the user can access their own bookings.
 * - /chargingStations/{stationId}: Stores charging station information. Accessible to everyone, but only operators can modify their own stations.
 * - /operators/{operatorId}: Stores operator information. Only accessible to themselves.
 *
 * Key Security Decisions:
 * - Users can only access their own data (profiles, vehicles, bookings).
 * - Operators can manage their own charging stations based on the `operatorId` field in the charging station documents.
 * - Public listing of charging stations is allowed.
 * - Users cannot list all users.
 * - Data validation is relaxed in this prototyping phase, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - ChargingStation documents include the `operatorId` to allow for direct authorization checks without additional reads.
 * - Booking documents include both `userId` and `stationId` to allow rules to be written to enforce user and station specific booking constraints.
 *
 * Structural Segregation:
 * - User-specific data (vehicles and bookings) is stored under the `/users/{userId}` path to enforce user ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile at /users/user_abc if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, or delete their own profile at /users/user_abc.
     * @deny (create) - User with UID 'user_abc' cannot create a profile for another user at /users/user_xyz.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the profile of user 'user_abc' at /users/user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for vehicles.
     * @path /users/{userId}/vehicles/{vehicleId}
     * @allow (create) - User with UID 'user_abc' can create a vehicle for themselves at /users/user_abc/vehicles/vehicle_123.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, or delete their own vehicle at /users/user_abc/vehicles/vehicle_123.
     * @deny (create) - User with UID 'user_abc' cannot create a vehicle for another user at /users/user_xyz/vehicles/vehicle_123.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, list, update, or delete the vehicle of user 'user_abc' at /users/user_abc/vehicles/vehicle_123.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/vehicles/{vehicleId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for bookings.
     * @path /users/{userId}/bookings/{bookingId}
     * @allow (create) - User with UID 'user_abc' can create a booking for themselves at /users/user_abc/bookings/booking_123.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, or delete their own booking at /users/user_abc/bookings/booking_123.
     * @deny (create) - User with UID 'user_abc' cannot create a booking for another user at /users/user_xyz/bookings/booking_123.
     * @deny (get, list, update, delete) - User with UID 'user_xyz' cannot read, list, update, or delete the booking of user 'user_abc' at /users/user_abc/bookings/booking_123.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/bookings/{bookingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to charging station information and restricts write access to authorized operators.
     * @path /chargingStations/{stationId}
     * @allow (get, list) - Any user can read charging station information.
     * @allow (create, update, delete) - Only an operator can create, update, or delete charging station if their operator ID matches the station's operatorId.
     * @deny (create, update, delete) - A user cannot modify a charging station if they are not the assigned operator.
     * @principle Public read with owner-only writes, authorization independence.
     */
    match /chargingStations/{stationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOperator(stationId) {
        return isSignedIn() && request.auth.uid == resource.data.operatorId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isOperator(stationId);
      allow delete: if isOperator(stationId);
    }

    /**
     * @description Enforces user-ownership for operator profiles.
     * @path /operators/{operatorId}
     * @allow (create) - Operator with UID 'operator_abc' can create their own profile at /operators/operator_abc.
     * @allow (get, update, delete) - Operator with UID 'operator_abc' can read, update, or delete their own profile at /operators/operator_abc.
     * @deny (create) - Operator with UID 'operator_abc' cannot create a profile for another operator at /operators/operator_xyz.
     * @deny (get, update, delete) - Operator with UID 'operator_xyz' cannot read, update, or delete the profile of operator 'operator_abc' at /operators/operator_abc.
     * @principle Enforces document ownership for writes.
     */
    match /operators/{operatorId} {
      function isOwner(operatorId) {
        return request.auth != null && request.auth.uid == operatorId;
      }

      allow get: if isOwner(operatorId);
      allow list: if false;
      allow create: if isOwner(operatorId);
      allow update: if isOwner(operatorId);
      allow delete: if isOwner(operatorId);
    }
  }
}