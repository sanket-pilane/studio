/**
 * @fileoverview Firestore Security Rules for ChargeSpot Navigator.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model, combining path-based ownership for user-specific data and membership maps for collaborative management of charging stations.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the authenticated user with a matching UID.
 * - /charging_stations/{stationId}: Stores public charging station information, readable by anyone.
 * - /users/{userId}/bookings/{bookingId}: Stores user-specific booking information, accessible only to the owner. Includes the stationId for authorization independence.
 * - /operator_charging_stations/{stationId}: Stores charging stations managed by operators. Managed via membership map with the operator UID as the key
 *
 * Key Security Decisions:
 * - Public Read for Charging Stations: Charging station details are publicly readable to facilitate map display and discovery.
 * - Strict Ownership for User Data: User profiles and bookings are strictly controlled, accessible only to the authenticated user.
 * - Denormalization for Authorization: The stationId is denormalized into booking documents to avoid costly `get()` calls in security rules.  For operator charging stations, the UIDs are used as a key within a members map.
 * - Structural Segregation: Operator managed stations are separated into dedicated collections to simplify rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching UID.
     * @allow (get, update, delete) - Authenticated user accesses their own profile with matching UID.
     * @deny (create, get, update, delete) - Any other user attempts to access this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to charging station documents.
     * @path /charging_stations/{stationId}
     * @allow (get, list) - Anyone can read charging station details.
     * @deny (create, update, delete) - Only authorized users can modify charging station details.
     * @principle Allows public read access while restricting write access.
     */
    match /charging_stations/{stationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to booking documents nested under user profiles.
     * @path /users/{userId}/bookings/{bookingId}
     * @allow (create, get, update, delete) - Authenticated user accesses their own bookings.
     * @deny (create, get, update, delete) - Any other user attempts to access these bookings.
     * @principle Enforces document ownership for user bookings.
     */
    match /users/{userId}/bookings/{bookingId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to charging station documents managed by operators.
     * @path /operator_charging_stations/{stationId}
     * @allow (get, list) - Anyone can read charging station details.
     * @allow (create, update, delete) - Only the operator listed in the members map can manage the station.
     * @principle Allows public read access while restricting write access to authorized operators.
     */
    match /operator_charging_stations/{stationId} {

      allow get, list: if true;

      allow create: if request.auth.uid in request.resource.data.members; // TODO: Add more robust validation for operator creation
      allow update: if request.auth.uid in request.resource.data.members;
      allow delete: if request.auth.uid in resource.data.members;
    }
  }
}